using System.Net;
using System.Net.Http.Headers;

namespace MethodCache.HttpCaching;

/// <summary>
/// Represents a cached HTTP response with metadata for validation and freshness calculation.
/// </summary>
public class HttpCacheEntry
{
    /// <summary>
    /// The URI of the request that generated this cache entry.
    /// </summary>
    public required string RequestUri { get; init; }

    /// <summary>
    /// The HTTP method of the request.
    /// </summary>
    public required string Method { get; init; }

    /// <summary>
    /// The HTTP status code of the response.
    /// </summary>
    public HttpStatusCode StatusCode { get; init; }

    /// <summary>
    /// The response body content.
    /// </summary>
    public byte[] Content { get; init; } = Array.Empty<byte>();

    /// <summary>
    /// The response headers serialized for storage.
    /// </summary>
    public Dictionary<string, string[]> Headers { get; init; } = new();

    /// <summary>
    /// The content headers serialized for storage.
    /// </summary>
    public Dictionary<string, string[]> ContentHeaders { get; init; } = new();

    /// <summary>
    /// The ETag value from the response, if present.
    /// </summary>
    public string? ETag { get; init; }

    /// <summary>
    /// The Last-Modified value from the response, if present.
    /// </summary>
    public DateTimeOffset? LastModified { get; init; }

    /// <summary>
    /// The Cache-Control header parsed from the response.
    /// </summary>
    public CacheControlHeaderValue? CacheControl { get; init; }

    /// <summary>
    /// The Expires header from the response, if present.
    /// </summary>
    public DateTimeOffset? Expires { get; init; }

    /// <summary>
    /// The Date header from the response (when the response was generated by the origin server).
    /// </summary>
    public DateTimeOffset? Date { get; init; }

    /// <summary>
    /// When this entry was stored in the cache.
    /// </summary>
    public DateTimeOffset StoredAt { get; init; } = DateTimeOffset.UtcNow;

    /// <summary>
    /// The Vary headers that affect caching for this response.
    /// </summary>
    public string[]? VaryHeaders { get; init; }

    /// <summary>
    /// Creates a cache entry from an HTTP response message.
    /// </summary>
    public static async Task<HttpCacheEntry> FromResponseAsync(
        HttpRequestMessage request,
        HttpResponseMessage response)
    {
        // Store original content headers before reading content
        var originalContentHeaders = response.Content.Headers.ToList();

        var content = await response.Content.ReadAsByteArrayAsync();

        // Replace the consumed content with a new ByteArrayContent so the response can still be read
        response.Content = new ByteArrayContent(content);

        // Restore the original content headers
        foreach (var header in originalContentHeaders)
        {
            response.Content.Headers.TryAddWithoutValidation(header.Key, header.Value);
        }

        return new HttpCacheEntry
        {
            RequestUri = request.RequestUri?.ToString() ?? "",
            Method = request.Method.ToString(),
            StatusCode = response.StatusCode,
            Content = content,
            Headers = SerializeHeaders(response.Headers),
            ContentHeaders = SerializeHeaders(response.Content.Headers),
            ETag = response.Headers.ETag?.Tag,
            LastModified = response.Content.Headers.LastModified,
            CacheControl = response.Headers.CacheControl,
            Expires = response.Content.Headers.Expires,
            Date = response.Headers.Date,
            StoredAt = DateTimeOffset.UtcNow,
            VaryHeaders = response.Headers.Vary?.ToArray()
        };
    }

    /// <summary>
    /// Converts this cache entry back to an HTTP response message.
    /// </summary>
    public HttpResponseMessage ToHttpResponse()
    {
        var response = new HttpResponseMessage(StatusCode)
        {
            Content = new ByteArrayContent(Content)
        };

        // Restore response headers
        foreach (var header in Headers)
        {
            response.Headers.TryAddWithoutValidation(header.Key, header.Value);
        }

        // Restore content headers
        foreach (var header in ContentHeaders)
        {
            response.Content.Headers.TryAddWithoutValidation(header.Key, header.Value);
        }

        return response;
    }

    /// <summary>
    /// Updates this entry with new headers from a 304 Not Modified response.
    /// </summary>
    public HttpCacheEntry WithUpdatedHeaders(HttpResponseMessage notModifiedResponse)
    {
        var mergedHeaders = new Dictionary<string, string[]>(StringComparer.OrdinalIgnoreCase);

        foreach (var header in Headers)
        {
            mergedHeaders[header.Key] = header.Value;
        }

        var updatedHeaders = SerializeHeaders(notModifiedResponse.Headers);
        foreach (var header in updatedHeaders)
        {
            mergedHeaders[header.Key] = header.Value;
        }

        return new HttpCacheEntry
        {
            RequestUri = RequestUri,
            Method = Method,
            StatusCode = HttpStatusCode.OK, // Return 200 to client, not 304
            Content = Content,
            Headers = mergedHeaders,
            ContentHeaders = ContentHeaders, // Keep original content headers
            ETag = notModifiedResponse.Headers.ETag?.Tag ?? ETag,
            LastModified = notModifiedResponse.Content?.Headers.LastModified ?? LastModified,
            CacheControl = notModifiedResponse.Headers.CacheControl ?? CacheControl,
            Expires = notModifiedResponse.Content?.Headers.Expires ?? Expires,
            Date = notModifiedResponse.Headers.Date ?? Date,
            StoredAt = DateTimeOffset.UtcNow, // Reset storage time
            VaryHeaders = notModifiedResponse.Headers.Vary?.ToArray() ?? VaryHeaders
        };
    }
    /// <summary>
    /// Calculates the age of this cache entry.
    /// </summary>
    public TimeSpan GetAge()
    {
        return DateTimeOffset.UtcNow - StoredAt;
    }

    /// <summary>
    /// Determines if this cache entry can be validated with conditional requests.
    /// </summary>
    public bool CanValidate()
    {
        return !string.IsNullOrEmpty(ETag) || LastModified.HasValue;
    }

    private static Dictionary<string, string[]> SerializeHeaders(HttpHeaders headers)
    {
        var result = new Dictionary<string, string[]>();
        foreach (var header in headers)
        {
            result[header.Key] = header.Value.ToArray();
        }
        return result;
    }
}
